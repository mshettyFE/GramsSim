<?xml version = "1.0" encoding = "UTF-8" ?>

<!-- Please see README.md for documentation. -->

<parameters>
  
  <global>
  
    <!-- The following line does nothing! It's there for documentation:
    the default value of the 'options' option is "options.xml" -->
    <option name="options" value="options.xml" type="string" desc="XML file of options">
        If you want to, you can include text like this within an option
        tag. You can use this for additional documentation. The program
        does not read or interpret it. 
    </option>

    <option name="verbose" short="v" value="false" type="bool" desc="display details"/>
    <option name="debug" short="d" value="false" type="bool" />
    <option name="help" short="h" value="false" type="bool" desc="show help then exit" />

  </global>

  <gramsg4>

    <!-- The file that contains the GDML description of the detector -->
    <option name="gdmlfile" short="g" value="grams.gdml" type="string" 
        desc="input GDML detector desc"/>    

    <!-- If not blank, write a parsed version of the GDML input file.
    This can be used as input to ROOT, since ROOT doesn't accept the
    GDML <loop> tags. Note that prior to Geant4.10.7, a G4 application
    (like gramsg4) will crash if it tries to out to a GDML file 
    that already exists. -->
    <option name="gdmlout" value="" type="string" 
        desc="write parsed GDML to this file" />    

    <!-- The file of Geant4 commands to be executed. If UI is on, this parameter
    is ignored. Take a look at the mac/ directory for some ideas. -->
    <option name="macrofile" short="m" value="mac/batch.mac" type="string" 
        desc="G4 macro file"/>

    <!-- If this flag is turned on, gramsg4 will start in an
    interactive graphical mode. It will then execute the contents
    of the Geant4 macro file specified by option 'uimacrofile' -->
    <option name="ui" value="false" type="boolean" desc="start UI session"/>
    <option name="uimacrofile" value="mac/vis.mac" type="string" desc="G4 macro file for UI"/>

    <!-- The name of the output file. The G4 Analysis Manager will automatically
    append '.root' to this name.-->
    <option name="outputfile" short="o" value="gramsg4" type="string" desc="output file"/>

    <!-- The physics list to be used by the detector simulation. --> 
    <option name="physicslist" short= "p" value="FTFP_BERT_LIV+OPTICAL+STEPLIMIT" type="string" 
        desc="physics list">
        Here are few options. There are many, many others. Note that to simulate
        voxels/pixels, you want to include +STEPLIMIT; to include scintillation
        photons you want to include +OPTICAL. 
        "FTFP_BERT" - typical for HEP applications
        "QGSP_BIC_HP" - typical medical applications
        "QGSP_BIC_HP_LIV+OPTICAL+STEPLIMIT" - Gave this a try. Needs review.
        See README.md for references.
    </option>

    <!-- Do we want to turn off this optical physics? Note that if you don't include
    OPTICAL (or G4OpticalPhysics) in the physics list above, these processes
    won't happen anyway. -->
    <option name="noscint" value="false" type="boolean" 
	    desc="turn off scintillation" /> 

    <!-- Display available physics lists. --> 
    <option name="showphysicslists" short="l" value="false" type="boolean" 
        desc="show physics lists then exit" />

    <option name="larstepsize" value="0.02" type="double" 
        desc="LAr TPC step size" >
      This is the step size for charged particles in the LAr TPC.
      It has no effect until the step-limit physics is turned on
      ("G4StepLimiterPhysics" or simply STEPLIMIT) in the physicslist
      option above. 

      It should be the size of the voxels or pixels in the readout.

      Units are mm (default G4 length unit). 

      If this is commented out, the program will use the step size
      in the GDML file for "volTPCActive".
    </option>

    <!-- If # threads > 0, enable multi-threaded execution. 
    Note that this does not magically make your program thread-safe -->
    <option name="nthreads" short = "t" value="0" type="integer" desc="number of threads"/>

    <!-- Variables that have to do with Random Number Generation (RNG).
    You can leave these alone until you want to re-create a particular
    Monte Carlo event. -->

    <option name="rngseed" short="s" value="-1" type="integer" desc="random number seed">
        The random number seed for the simulation. Use -1 if you want the
        program to start with a random value and you're not interested 
        in recreating the run.
    </option>
    <option name="rngdir" value="" type="string" desc="rng save/restore directory">
        The directory to save/restore the state of the random-number generation
        engine. If this is blank (value=""), do not save/restore the RNG state.
    </option>
    <option name="rngperevent" value="0" type="integer" desc="rng save per event">
        value="0" - Do not save per-event RNG state in 'rngdir'.
        value="1" - Save RNG state before primary-particle generation.
        value="2" - Save RNG state before event processing (after primary generation)
        value="3" - Both are stored.
    </option>
    <option name="rngrestorefile" value="" type="string" desc="restore rng from file">
        Restore the RNG at the start of the job from this file within 'rngdir'. 
        Use the value of 'rngseed' if this is blank; otherwise get the state from
        'rngdir/rngrestorefile'. 
    </option>
    
  </gramsg4>

</parameters>
