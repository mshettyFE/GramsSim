<?xml version = "1.0" encoding = "UTF-8" ?>

<!-- Please see GramsSim/util/README.md for documentation. -->

<parameters>
  
  <global>

    <!-- The parameters in this section are meant to apply to all the
         programs. However, you can ovverride them within the
         individual program blocks, though it's probably more useful
         to override them on the command line. Be careful about what
         you're overriding, especially the unit options. -->
  
    <!-- The following line does nothing! It's there for documentation:
    the default value of the 'options' option is "options.xml" -->
    <option name="options" value="options.xml" type="string" desc="XML file of options">
        If you want to, you can include text like this within an option
        tag. You can use this for additional documentation. The program
        does not read or interpret it. 
    </option>

    <option name="verbose" short="v" type="flag" desc="display details"/>
    <option name="debug" short="d" type="flag" />
    <option name="help" short="h" type="flag" desc="show help then exit" />

    <!-- Define a consistent set of units. Note that it's up to the
         individual programs to access these parameters and write
         their output in these units. (I'm looking at you, Geant4!).

         Length unit: as of Jan-2022, the only valid values are "cm" and "mm".
         Energy unit: as of Jan-2022, the only valid values are "MeV" and "GeV".
     
         Note that this does not directly affect the GDML file and
         Geant4 macro files, as any dimensioned quantities in those
         files have units specified explicitly.
	 -->
    <option name="LengthUnit" type="string" value="cm" desc="length unit for program output" />
    <option name="EnergyUnit" type="string" value="MeV" desc="energy unit for program output" />

    <option name="rngseed" short="s" value="-1" type="integer" desc="random number seed">
        The random number seed for the simulation. Use 0 if you want the
        program to start with a random value and you're not interested 
        in recreating the run.
    </option>


  </global>

  <gramssky>

    <!-- Number of sky events to generate -->
    <option name="events" short="n" value="1000" type="integer" desc="number of events" />

    <!-- Output HepMC3 file. If you omit an extension to this file
         name, then the program will append ".hepmc3" to the end of
         this parameter. -->
    <option name="outputfile" short="o" value="gramssky.hepmc3" type="string" 
        desc="output file"/>    

    <!-- The PDG (Particle Data Group) code of the primary
         particles. For a sky simulation, that will almost certainly
         be 22 (photon). -->
    <option name="PrimaryPDG" value="22" type="integer" desc="primary particle PDG code"/>    
    
    <!-- PositionGeneration = how to generate the primary particle
         positions. The following are allowed values:

	 "Point": Specify an (x,y,z) fixed position.
	 "Iso": Generate particles isotropically on a (theta,phi) region of the celestial sphere.

         See the <global> section above for units.
    -->

    <option name="PositionGeneration" value="Point" type="string" 
	    desc="how to generate primary positions"/> 

    <!-- The option(s) for "Point" -->
    <option name="PointSource" value="(0,0,200)" type="vector" 
	    desc="(x,y,z) for Point generation"/>    

    <!-- The option(s) for "Iso"; units are radians -->
    <option name="ThetaMinMax" value="(0,1.571)" type="vector" 
	    desc="theta (min,max) for Iso generation"/>    
    <option name="PhiMinMax" value="(0,6.283)" type="vector" 
	    desc="phi (min,max) for Iso generation"/>    
    
    <!-- How to generate the primary particle energies. The following
         are defined:

	 "Fixed": Specify a fixed energy.
	 "Gaus": Generate energy according to gaussian distribution.
	 "Flat": Uniformly generate energy between two limits.
	 "BlackBody": Generate energy according to black-body distribution.
	 "PowerLaw": Generate energy according to power-law distribution.
	 "Hist": Generate energy according to a ROOT histogram. 

         See the <global> section above for units.
    -->

    <option name="EnergyGeneration" value="Fixed" type="string" 
	    desc="how to generate primary energies"/>    

    <!-- Common to all energy distributions -->
    <option name="EnergyMin" value="0" type="double" 
	    desc="Minimum for energy distribution"/>
    <option name="EnergyMax" value="1000" type="double" 
	    desc="Maximum for energy distribution"/>

    <!-- Option(s) for "Fixed" energy distribution. -->
    <option name="FixedEnergy" value="1" type="double" 
	    desc="Energy for Fixed generation"/>    

    <!-- Option(s) for "Gaus" energy distribution. -->
    <option name="GausMean" value="2" type="double" 
	    desc="Mean for gaussian energy distribution"/>
    <option name="GausWidth" value="0.2" type="double" 
	    desc="Width for gaussian energy distribution"/>

    <!-- Option(s) for "Flat" energy distribution. -->
    <option name="FlatMin" value="1" type="double" 
	    desc="Minimum energy for flat distribution"/>
    <option name="FlatMax" value="3" type="double" 
	    desc="Maximum energy for flat distribution"/>

    <!-- Option(s) for "BlackBody" energy distribution. -->
    <option name="RadTemp" value="1" type="double" 
	    desc="Radiation temperature (kT) for black-body distribution"/>

    <!-- Option(s) for "PowerLaw" energy distribution. -->
    <option name="PhotonIndex" value="2" type="double" 
	    desc="Power-law exponent of the photon spectrum"/>

    <!-- Option(s) for "Hist" energy distribution. -->
    <!-- This can be a full or relative path to the file. -->
    <option name="HistFile" value="example.root" type="string" 
	    desc="Input file containing histogram"/>
    <!-- This can be a path to the histogram within the file. -->
    <option name="HistName" value="example" type="string" 
	    desc="Name of histogram in input file"/>

    <!-- In GramsSky, we generate a particle coming from the celestial
         sphere according to some energy/position
         distribution. However, the simulation's sphere has some
         finite radius within the world volume, while the actual
         celestial sphere is actually at "infinity".
	 
	     To simulate this effect, we construct an imaginary disc
	     tangent to the simulation sphere at the point of the
	     particle's generation; see GramsSky/SkyDiagram.jpg and
	     GramsSky/README.md for details. This routine randomly shifts
	     the origin of the particle across the surface of that disc.

         It also adjusts for the direction of the sphere with respect
         to detector coordinates, and the center of the detector with
         respect to the center of the sphere.

         See the <global> section above for units. As of Jan-2022,
         these are cm and MeV
    -->

    <!-- The radius of a sphere from which the particles will be
         generated. The units should be the same as those in the GDML
         file (centimeters as of Jan-2022). Make sure this sphere will
         fit in the world volume as defined in the GDML file. -->
    <option name="RadiusSphere" value="300" type="double" 
        desc="radius of generated particles"/>    
    
    <!-- The radius of the tangent disc. If this is <= 0, then
         RadiusSphere is used. -->
    <option name="RadiusDisc" value="0" type="double" 
        desc="radius of tangent disc"/> 

    <!-- The center of the simulated sphere in detector
         coordinates. 

         Bear in mind that the origin of the coordinate system is
         determined by the GRAMS GDML file, and as Jan-2022 it is
         _not_ the center of the detector. As of Jan-2022, the center
         of the LArTPC is (0,0,-14.783); the center of the overall
         detector is at (0,0,45.217). -->
    <option name="OriginSphere" value="(0,0,-15)" type="vector" 
        desc="detector center in detector coords"/> 
    
    <!-- This is the direction of the "north pole" of the celestial
         sphere in the detector coordinate system. Bear in mind that
         imported celestial maps are usually aligned with the galactic
         coordinate system, while the physical detector will have
         typically have some other orientation for its z-axis.

         If this vector has three elements, it's interpreted as
         (x,y,z). If it has two elements (e.g., (0.707,0)) then it's
         interpreted as (theta,phi).
    -->
    <option name="MapDirection" value="(0,0,1)" type="vector" 
        desc="map 'north pole' in detector coords"/> 

  </gramssky>

  <gramsg4>

    <!-- The file that contains the GDML description of the detector -->
    <option name="gdmlfile" short="g" value="grams.gdml" type="string" 
        desc="input GDML detector desc"/>    

    <!-- If not blank, write a parsed version of the GDML input file.
    This can be used as input to ROOT, since ROOT doesn't accept the
    GDML <loop> tags. Note that prior to Geant4.10.7, a G4 application
    (like gramsg4) will crash if it tries to write to a GDML file 
    that already exists. -->
    <option name="gdmlout" value="" type="string" 
        desc="write parsed GDML to this file" />    

    <!-- The file of Geant4 commands to be executed. If ui is on, this parameter
    is ignored. Take a look at the mac/ directory for some ideas. -->
    <option name="macrofile" short="m" value="mac/batch.mac" type="string" 
        desc="G4 macro file"/>

    <!-- If this flag is turned on, gramsg4 will start in an
    interactive graphical mode. It will then execute the contents
    of the Geant4 macro file specified by option 'uimacrofile' -->
    <option name="ui" type="flag" desc="start UI session"/>
    <option name="uimacrofile" value="mac/vis-menus.mac" type="string" desc="G4 macro file for UI"/>

    <!-- The name of an input file containing events from some external
    event generator. If this option is present, this file will override
    any particle-generation commands in the macrofile. The file must be in
    HepMC3 format (https://gitlab.cern.ch/hepmc/HepMC3). The internal format
    of the file is determined from its extension (the part after the final "."):

    .hepmc2 = HepMC2 text format
    .hepmc3 = HepMC3 text format
    .hep    = HEPEVT text format (https://cdcvs.fnal.gov/redmine/projects/minos-sim/wiki/HEPEVT_files)
    .root   = HepMC3 ROOT format
    .treeroot = HepMC3 TTree ROOT format
    .lhef     = LHEF format (arXiv:hep-ph/0609017)

    Some of these formats do not provide a way to specify the (x,y,z,t) vertex
    of an event (e.g., HEPEVT, LHEF). In those cases the vertex of the event will be
    [TODO: Fill in an appropriate action.]

    See GramsSim/GramsG4/README.md for a more detailed description.
    -->
    <option name="inputgen" short="i" value="" type="string" desc="input generator events"/>

    <!-- The name of the output file. The G4 Analysis Manager will automatically
    append '.root' to this name.-->
    <option name="outputfile" short="o" value="gramsg4" type="string" desc="output file"/>

    <!-- The physics list to be used by the detector simulation. --> 
    <option name="physicslist" short= "p" value="FTFP_BERT_LIV+OPTICAL+STEPLIMIT" type="string" 
        desc="physics list">
        Here are few options. There are many, many others. Note that to simulate
        voxels/pixels, you want to include +STEPLIMIT; to include scintillation
        photons you want to include +OPTICAL. 
        "FTFP_BERT" - typical for HEP applications
        "QGSP_BIC_HP" - typical medical applications
        "QGSP_BIC_HP_LIV+OPTICAL+STEPLIMIT" - Gave this a try. Needs review.
        See README.md for references.
    </option>

    <!-- Do we want to turn on this optical physics? Note that if you don't include
    OPTICAL (or G4OpticalPhysics) in the physics list above, these processes
    won't happen anyway. -->
    <option name="scint" value="true" type="boolean" 
	    desc="turn on/off scintillation" /> 

    <!-- Display available physics lists. --> 
    <option name="showphysicslists" short="l" type="flag" 
        desc="show physics lists then exit" />

    <option name="larstepsize" value="0.02" type="double" 
        desc="LAr TPC step size" >
      This is the step size for charged particles in the LAr TPC.
      It has no effect until the step-limit physics is turned on
      ("G4StepLimiterPhysics" or simply STEPLIMIT) in the physicslist
      option above. 

      It should be the size of the voxels or pixels in the readout.

      Units are mm (default G4 length unit). 

      If this is commented out, the program will use the step size
      in the GDML file for "volTPCActive".
    </option>

    <!-- If # threads > 0, enable multi-threaded execution. 
    Note that this does not magically make your program thread-safe.
    While the current version of gramsg4 is thread-safe, turning this
    option on means the order of rows in the output ntuples can't be
    predicted. -->
    <option name="nthreads" short = "t" value="0" type="integer" desc="number of threads"/>

    <!-- Variables that have to do with Random Number Generation (RNG).
    You can leave these alone until you want to re-create a particular
    Monte Carlo event. -->
    <option name="rngdir" value="" type="string" desc="rng save/restore directory">
        The directory to save/restore the state of the random-number generation
        engine. If this is blank (value=""), do not save/restore the RNG state.
    </option>
    <option name="rngperevent" value="0" type="integer" desc="rng save per event">
        value="0" - Do not save per-event RNG state in 'rngdir'.
        value="1" - Save RNG state before primary-particle generation.
        value="2" - Save RNG state before event processing (after primary generation)
        value="3" - Both are stored.
    </option>
    <option name="rngrestorefile" value="" type="string" desc="restore rng from file">
        Restore the RNG at the start of the job from this file within 'rngdir'. 
        Use the value of 'rngseed' if this is blank; otherwise get the state from
        'rngdir/rngrestorefile'. 
    </option>
    
  </gramsg4>

  <gramsdetsim>

    <!-- Input ROOT file from GramsG4 (or at least contains a LArHits-compatible ntuple -->
    <option name="inputfile" short="i" value="gramsg4.root" type="string" 
        desc="input file"/>    

    <!-- Name of ntuple in the input file that contains the hit information. -->
    <option name="inputntuple" value="LArHits" type="string" desc="input ntuple"/>

    <!-- Output ROOT file -->
    <option name="outputfile" short="o" value="gramsdetsim.root" type="string" 
        desc="output file"/>    

    <!-- Name of ntuple in the output file that contains the
         detector-response information. This ntuple will be a
         row-for-row match with the input ntuple, and can therefore be
         used as a "friend ntuple" with the input intuple (see "friend
         TTrees" in the ROOT documentation.  -->
    <option name="outputntuple" value="DetSim" type="string" desc="output ntuple"/>

    Physics-model options. Note that ntuple units are the same as
    Geant4: MeV, mm, ns.

    Options associated with modeling recombination effects.
    <option name="recombination" value="true" type="boolean" 
	    desc="model recombination effects"/>

    Electric field on the cloud of ionized particles, varies with
    position due to space charge, which we don't have a model for yet.
    <option name="field"  value="1.0" type="double"
	    desc="electric field [kV/cm]"/>

    Average of the a value for 20 to 90 degrees angle bins for proton
    sample detection in ArgoNeuT, unitless value.
    <option name="a" value="0.930" type="double"
	    desc="recombination constant"/>

    Average of the B value for 20 to 90 degrees angle bins for proton
    sample detection in ArgoNeuT, units of (kV*g)/(MeV*cm^3)
    <option name="b" value="0.212" type="double"
	    desc="recombination constant [(kV*g)/(MeV*cm^3)]"/>

    Density of liquid argon, from Brookhaven LAr page, units of (g/cm^3)
    <option name="rho" value="1.3973" type="double"
	    desc="LAr density [g/cm^3]"/>

  </gramsdetsim>

</parameters>
